/*
  Do not edit this file. It will be overwritten during updates.
*/

const path = require('path')
const childProcess = require('child_process')
const fs = require('fs')

const bsbFinishCompiling = '>>>> Finish compiling'
let timerID = null
let timeoutSeconds = 10

function fixCommand (command) {
  if (process.platform.indexOf('win32') !== -1) {
    command = `${command}.cmd`
  }
  return command
}

const bsb = () =>
  fixCommand(path.join('node_modules', '.bin', 'bsb'))

function monitorBsb (callback) {
  console.log('Vscode did not properly terminate the bsb process. Restarting...')
  setTimeout(runBsbWatchCommand, 100, callback)
}

function finishRunBsbWatchCommand (callback) {
  let command = path.join(bsb())
  const cprocess = childProcess.spawn(command, ['-make-world', '-w'], {
  })

  //
  // Monitor the output of the process to make sure it is working.
  // If vscode does not properly terminate the processes then the bsb
  // locks up. For this case, this process is terminated and a warning
  // is displayed to the console.
  //

  timerID = setTimeout(monitorBsb, timeoutSeconds * 1000, callback)

  cprocess.stdout.on('data', data => {
    data = data.toString()
    process.stdout.write(data)
    if (typeof callback === 'function') {
      if (data.indexOf(bsbFinishCompiling) !== -1) {
        if (timerID) {
          clearTimeout(timerID)
          timerID = null
        }
        callback()
        callback = undefined
      }
    }
  })
  cprocess.stderr.on('data', data => {
    data = data.toString()
    process.stdout.write('stderr:' + data)
  })

  cprocess.on('error', () => {
    console.log('bsb error')
  })
  cprocess.on('exit', () => {
  })
}

const lockFilePath = '.bsb.lock'

function killProcess (callback) {
  try {
    const contents = parseInt(fs.readFileSync(lockFilePath))
    try {
      process.kill(contents)
    } catch (e) {
    }
  } catch (e) {
  }

  try {
    fs.unlink(lockFilePath, () => { setTimeout(() => runBsbWatchCommand(callback), 100) })
  } catch (err) {
    setTimeout(() => runBsbWatchCommand(callback), 100)
  }
}

function runBsbWatchCommand (callback) {
  if (!fs.existsSync(lockFilePath)) {
    finishRunBsbWatchCommand(callback)
    return
  }
  killProcess(callback)
}

const bsbCommand = (text) => {
  return bsb() + ' -make-world'
}

module.exports = { bsbCommand, runBsbWatchCommand }
